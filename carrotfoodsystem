video: https://www.youtube.com/watch?v=ljP_oXMd_8U
CarrotManager:
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local CarrotFolder = ReplicatedStorage:FindFirstChild("MountainCarrots")
local GoldenCarrot = CarrotFolder and CarrotFolder:FindFirstChild("GoldenCarrot")
local CurrentCarrotsFolder = Workspace:FindFirstChild("CurrentCarrots")




local function getOrCreatePrimaryPart(model)
	if model.PrimaryPart then
		return model.PrimaryPart
	else
		local tempPart = Instance.new("Part")
		tempPart.Size = Vector3.new(1, 1, 1)
		tempPart.Transparency = 1
		tempPart.Anchored = true
		tempPart.CanCollide = false
		tempPart.Parent = model

		for _, part in ipairs(model:GetChildren()) do
			if part:IsA("BasePart") then
				tempPart.CFrame = part.CFrame
				break
			end
		end

		model.PrimaryPart = tempPart
		return tempPart
	end
end


local function spawnCarrotAt(position)
	local chosenCarrot
	local isGoldenCarrot = GoldenCarrot and math.random(1, 100) == 1 

	if isGoldenCarrot then
		chosenCarrot = GoldenCarrot
		print("Golden Carrot Spawned")
	else
		
		local availableCarrots = {}
		for _, carrot in ipairs(CarrotFolder:GetChildren()) do
			if carrot.Name ~= "GoldenCarrot" then
				table.insert(availableCarrots, carrot)
			end
		end

		if #availableCarrots > 0 then
			chosenCarrot = availableCarrots[math.random(1, #availableCarrots)]
		end
	end

	if not chosenCarrot then
		warn("No valid carrots")
		return
	end

	local carrotClone = chosenCarrot:Clone()
	carrotClone.Parent = CurrentCarrotsFolder

	local primaryPart = getOrCreatePrimaryPart(carrotClone)
	if primaryPart then
		carrotClone:SetPrimaryPartCFrame(position)
	end

	
	local clickDetector = Instance.new("ClickDetector")
	clickDetector.Parent = carrotClone

	clickDetector.MouseClick:Connect(function(player)
		local carrotBin = ReplicatedStorage:FindFirstChild("CarrotBinCount")
		if carrotBin then
			if chosenCarrot == GoldenCarrot then
				carrotBin.Value = carrotBin.Value + 20
				print("A Golden Carrot has been Collected")
			else
				carrotBin.Value = carrotBin.Value + 1
			end
		end

		carrotClone:Destroy()
		task.wait(60) -- delay
		spawnCarrotAt(position) 
	end)
end


local function spawnInitialCarrots()
	print("carrot is starting")
	for _, carrot in ipairs(CarrotFolder:GetChildren()) do
		if carrot.Name ~= "GoldenCarrot" and #CurrentCarrotsFolder:GetChildren() < 58 then
			local primaryPart = getOrCreatePrimaryPart(carrot)
			if primaryPart then
				spawnCarrotAt(primaryPart.CFrame)
			end
		end
	end
end


spawnInitialCarrots()

---------------------------
UpdateFoodSigns:
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")


local carrotBin = ReplicatedStorage:FindFirstChild("CarrotBinCount")
if not carrotBin then
	warn("CarrotBinCount IntValue not in ReplicatedStorage")
	return
end


local signTextLabel = Workspace:FindFirstChild("MainMap")
if signTextLabel then
	signTextLabel = signTextLabel:FindFirstChild("FoodStorage")
end
if signTextLabel then
	signTextLabel = signTextLabel:FindFirstChild("FoodStorage")
end
if signTextLabel then
	signTextLabel = signTextLabel:FindFirstChild("CarrotSignCounter")
end
if signTextLabel then
	signTextLabel = signTextLabel:FindFirstChild("SurfaceGui")
end
if signTextLabel then
	signTextLabel = signTextLabel:FindFirstChild("SIGN")
end

if not signTextLabel or not signTextLabel:IsA("TextLabel") then
	warn("SIGN TextLabel not in FoodStorage")
	return
end

local function updateSign()
	signTextLabel.Text = carrotBin.Value.."/100"
end

updateSign()

carrotBin:GetPropertyChangedSignal("Value"):Connect(updateSign)


--MEAT STUFF

local MeatBin = ReplicatedStorage:FindFirstChild("MeatBinCount")
if not MeatBin then
	warn("MeatBinCount IntValue not in ReplicatedStorage!")
	return
end

local function updateSignMeat()
local signTextLabel = Workspace:FindFirstChild("MainMap")
if signTextLabel then
	signTextLabel = signTextLabel:FindFirstChild("FoodStorage")
end
if signTextLabel then
	signTextLabel = signTextLabel:FindFirstChild("FoodStorage")
end
if signTextLabel then
	signTextLabel = signTextLabel:FindFirstChild("MeatSignCounter")
end
if signTextLabel then
	signTextLabel = signTextLabel:FindFirstChild("SurfaceGui")
end
if signTextLabel then
	signTextLabel = signTextLabel:FindFirstChild("SIGN")
end

if not signTextLabel or not signTextLabel:IsA("TextLabel") then
	warn("SIGN TextLabel not in FoodStorage")
	return
end


	signTextLabel.Text = MeatBin.Value.."/100"
end

updateSignMeat()

MeatBin:GetPropertyChangedSignal("Value"):Connect(updateSignMeat)

local CatFoodBin = ReplicatedStorage:FindFirstChild("CatFoodCount")
if not CatFoodBin then
	warn("CatFood IntValue not in ReplicatedStorage")
	return
end

local function updateSignCatFood()
	local signTextLabel = Workspace:FindFirstChild("MainMap")
	if signTextLabel then
		signTextLabel = signTextLabel:FindFirstChild("FoodStorage")
	end
	if signTextLabel then
		signTextLabel = signTextLabel:FindFirstChild("FoodStorage")
	end
	if signTextLabel then
		signTextLabel = signTextLabel:FindFirstChild("CatFoodCounter")
	end
	if signTextLabel then
		signTextLabel = signTextLabel:FindFirstChild("SurfaceGui")
	end
	if signTextLabel then
		signTextLabel = signTextLabel:FindFirstChild("SIGN")
	end

	if not signTextLabel or not signTextLabel:IsA("TextLabel") then
		warn("SIGN TextLabel not in FoodStorage")
		return
	end


	signTextLabel.Text = CatFoodBin.Value.."/100"
end

updateSignCatFood()

MeatBin:GetPropertyChangedSignal("Value"):Connect(updateSignCatFood)
----------------------------------------------------------------------------
